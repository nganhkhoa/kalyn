(import "Assembly.kalyn")
(import "OS.kalyn")
(import "Stdlib.kalyn")
(import "Subroutines.kalyn")

;; https://filippo.io/linux-syscall-table/
;; see also section 2 of the Linux man pages

(public defn basicOp (Func String BinOp (Stateful VFunction))
  (name op)
  (do State
    (with temp newTemp)
    (returnState
      (function
        (append name "__uncurried")
        [(OP MOV (MR (getArg 2) temp))
         (OP op (MR (getArg 1) temp))
         (OP MOV (RR temp rax))
         RET]))))

(public def plus (Stateful VFunction)
  (basicOp "plus" ADD))

(public def minus (Stateful VFunction)
  (basicOp "minus" SUB))

(public def times (Stateful VFunction)
  (basicOp "times" IMUL))

(public defn divOp (Func String (List VInstruction) (Stateful VFunction))
  (name post)
  (do State
    (with temp newTemp)
    (returnState
      (function
        (append name  "__uncurried")
        (concat
          [[(OP MOV (MR (getArg 2) rax))
            CQTO
            (OP MOV (MR (getArg 1) temp))
            (IDIV temp)]
           post
           [RET]])))))

(public def divide (Stateful VFunction)
  (divOp "divide" []))

(public def modulo (Stateful VFunction)
  (divOp "modulo" [(OP MOV (RR rdx rax))]))

(public def bitAnd (Stateful VFunction)
  (basicOp "and" AND))

(public def bitOr (Stateful VFunction)
  (basicOp "or" OR))

(public def bitXor (Stateful VFunction)
  (basicOp "xor" XOR))

(public def bitNot (Stateful VFunction)
  (do State
    (with temp newTemp)
    (returnState
      (function
        "not"
        [(OP MOV (MR (getArg 1) temp))
         (UN NOT (R temp))
         (OP MOV (RR temp rax))]))))

(public defn shiftOp (Func String Shift (Stateful VFunction))
  (name op)
  (do State
    (with arg       newTemp)
    (with fixup     newLabel)
    (with fixupDone newLabel)
    (let needsZeroing
      (case op
        (SHL True)
        (SAL True)
        (SHR True)
        (SAR False)))
    (returnState
      (function
        (append name "__uncurried")
        [(OP MOV (MR (getArg 2) arg))
         (OP MOV (MR (getArg 1) rcx))
         (OP CMP (IR 64 rcx))
         (JUMP JGE fixup)
         (SHIFT Nothing op arg)
         (LABEL fixupDone)
         (OP MOV (RR arg rax))
         RET
         (LABEL fixup)
         (if needsZeroing
           (OP MOV (IR 0 arg))
           (SHIFT (Just 63) op arg))
         (OP MOV (RR arg rax))
         RET]))))

(public def bitSHL (Stateful VFunction)
  (shiftOp "shl" SHL))

(public def bitSHR (Stateful VFunction)
  (shiftOp "shr" SHR))

(public def bitSAL (Stateful VFunction)
  (shiftOp "sal" SAL))

(public def bitSAR (Stateful VFunction)
  (shiftOp "sar" SAR))

(public def monadPrint (Stateful VFunction)
  (do State
    (with temp newTemp)
    (with str  newTemp)
    (returnState
      (function
        "print__uncurried__unmonadified"
        [(OP MOV (MR (getArg 1) temp))
         (UN PUSH (R temp))
         (JUMP CALL "packString")
         (OP MOV (RR rax str))
         (unpush 1)
         (OP MOV (IR 1 rax))
         (OP MOV (IR 1 rdi))
         (LEA (Mem (Right 8) str Nothing) rsi)
         (OP MOV (MR (deref str) rdx))
         (SYSCALL 3)  ; write
         (OP MOV (IR 0 rax))
         RET]))))

(public def monadWriteFile (Stateful VFunction)
  (do State
    (with temp       newTemp)
    (with filename   newTemp)
    (with contents   newTemp)
    (with fd         newTemp)
    (with ptr        newTemp)
    (with bytesLeft  newTemp)
    (with notExists  newLabel)
    (with writeStart newLabel)
    (with writeDone  newLabel)
    (with crash      newLabel)
    (with msg        newTemp)
    (returnState
      (function
        "writeFile__uncurried__unmonadified"
        [(OP MOV (MR (getArg 2) temp))
         (UN PUSH (R temp))
         (JUMP CALL "packString")
         (unpush 1)
         (OP MOV (RR rax filename))
         (OP MOV (MR (getArg 1) temp))
         (UN PUSH (R temp))
         (JUMP CALL "packString")
         (unpush 1)
         (OP MOV (RR rax contents))
         (OP MOV (IR 87 rax))
         (LEA (getField 1 filename) rdi)
         (SYSCALL 1)  ; unlink
         (OP CMP (IR (-2) rax))
         (JUMP JE notExists)
         (OP CMP (IR 0 rax))
         (JUMP JL crash)
         (LABEL notExists)
         (OP MOV (IR 2 rax))
         (LEA (getField 1 filename) rdi)
         (OP MOV (IR 0x41 rsi))
         (OP MOV (IR 0o666 rdx))
         (SYSCALL 3)  ; open
         (OP CMP (IR 0 rax))
         (JUMP JL crash)
         (OP MOV (RR rax fd))
         (LEA (getField 1 contents) ptr)
         (OP MOV (MR (getField 0 contents) bytesLeft))
         (LABEL writeStart)
         (OP CMP (IR 0 bytesLeft))
         (JUMP JLE writeDone)
         (OP MOV (IR 1 rax))
         (OP MOV (RR fd rdi))
         (OP MOV (RR ptr rsi))
         (OP MOV (RR bytesLeft rdx))
         (SYSCALL 3)  ; write
         (OP CMP (IR 0 rax))
         (JUMP JL crash)
         (OP ADD (RR rax ptr))
         (OP SUB (RR rax bytesLeft))
         (JUMP JMP writeStart)
         (LABEL writeDone)
         (OP MOV (IR 3 rax))
         (OP MOV (RR fd rdi))
         (SYSCALL 1)  ; close
         (OP CMP (IR 0 rax))
         (JUMP JL crash)
         (OP MOV (IR 0 rax))
         RET
         (LABEL crash)
         (LEA (memLabelV "msgWriteFileFailed") msg)
         (UN PUSH (R msg))
         (JUMP CALL "crash")]))))

(public def monadSetFileMode (Stateful VFunction)
  (do State
    (with temp     newTemp)
    (with filename newTemp)
    (with crash    newLabel)
    (with msg      newTemp)
    (returnState
      (function
        "setFileMode__uncurried__unmonadified"
        [(OP MOV (MR (getArg 2) temp))
         (UN PUSH (R temp))
         (JUMP CALL "packString")
         (unpush 1)
         (OP MOV (RR rax filename))
         (OP MOV (IR 90 rax))
         (LEA (getField 1 filename) rdi)
         (OP MOV (MR (getArg 1) rsi))
         (SYSCALL 2)  ; chmod
         (OP CMP (IR 0 rax))
         (JUMP JL crash)
         (OP MOV (IR 0 rax))
         RET
         (LABEL crash)
         (LEA (memLabelV "msgSetFileModeFailed") msg)
         (UN PUSH (R msg))
         (JUMP CALL "crash")]))))

(public def monadGetWorkingDirectory (Stateful VFunction)
  (do State
    (with buf newTemp)
    (with msg newTemp)
    (with crash newLabel)
    (returnState
      (function
        "getWorkingDirectory__unmonadified"
        [(OP MOV (IR 79 rax))
         (LEA (memLabelV "syscallBuffer") buf)
         (OP MOV (RR buf rdi))
         (OP MOV (IR syscallBufferSize rsi))
         (SYSCALL 2)  ; getcwd
         (UN PUSH (R buf))
         (UN DEC (R rax))
         (UN PUSH (R rax))
         (JUMP CALL "unpackString")
         (unpush 2)
         RET
         (LABEL crash)
         (LEA (memLabelV "msgGetWorkingDirectoryFailed") msg)
         (UN PUSH (R msg))
         (JUMP CALL "crash")]))))

(public def monadReadFile (Stateful VFunction)
  (do State
    (with buffer newTemp)
    (with filename newTemp)
    (with fd newTemp)
    (with strStart newTemp)
    (with strEnd newTemp)
    (with bytesRead newTemp)
    (with msg newTemp)
    (with newString newTemp)
    (with allocedLength newTemp)
    (with readStart newLabel)
    (with readDone newLabel)
    (with skipStartUpdate newLabel)
    (with skipEndUpdate newLabel)
    (with crash newLabel)
    (returnState
      (function
        "readFile__uncurried__unmonadified"
        [(LEA (memLabelV "syscallBuffer") buffer)
         (UN PUSH (M (getArg 1)))
         (JUMP CALL "packString")
         (unpush 1)
         (OP MOV (RR rax filename))
         (OP MOV (IR 2 rax))
         (LEA (getField 1 filename) rdi)
         (OP MOV (IR 0 rsi))
         (SYSCALL 2)  ; open
         (OP MOV (RR rax fd))
         (OP MOV (IR 0 strStart))
         (OP MOV (IR 0 strEnd))
         (LABEL readStart)
         (OP MOV (IR 0 rax))
         (OP MOV (RR fd rdi))
         (OP MOV (RR buffer rsi))
         (OP MOV (IR syscallBufferSize rdx))
         (SYSCALL 3)  ; read
         (OP MOV (RR rax bytesRead))
         (OP CMP (IR 0 bytesRead))
         (JUMP JE readDone)
         (JUMP JL crash)
         (UN PUSH (R buffer))
         (UN PUSH (R bytesRead))
         (JUMP CALL "unpackString")
         (unpush 2)
         (OP MOV (RR rax newString))
         (OP CMP (IR 0 strStart))
         (JUMP JNE skipStartUpdate)
         (OP MOV (RR newString strStart))
         (JUMP JMP skipEndUpdate)
         (LABEL skipStartUpdate)
         (OP MOV (RM newString (deref strEnd)))
         (LABEL skipEndUpdate)
         (OP MOV (RR bytesRead allocedLength))
         (OP IMUL (IR 24 allocedLength))
         (LEA (Mem (Right -8) newString (Just (Pair Scale1 allocedLength))) strEnd)
         (JUMP JMP readStart)
         (LABEL readDone)
         (OP MOV (IR 3 rax))
         (OP MOV (RR fd rdi))
         (SYSCALL 1)  ; close
         (OP CMP (IR 0 rax))
         (JUMP JL crash)
         (OP MOV (RR strStart rax))
         RET
         (LABEL crash)
         (LEA (memLabelV "msgReadFileFailed") msg)
         (UN PUSH (R msg))
         (JUMP CALL "crash")]))))

(public def primitiveError (Stateful VFunction)
  (returnState
    (function
      "error__uncurried"
      [(UN PUSH (M (getArg 1)))
       (JUMP CALL "packString")
       (unpush 1)
       (UN PUSH (R rax))
       (JUMP CALL "crash")])))

(public defn compareOp (Func String Jump (Stateful VFunction))
  (name op)
  (do State
    (with temp newTemp)
    (with yes  newLabel)
    (returnState
      (function
        name
        [(OP MOV (MR (getArg 2) temp))
         (OP CMP (MR (getArg 1) temp))
         (JUMP op yes)
         (OP MOV (IR 0 rax))
         RET
         (LABEL yes)
         (OP MOV (IR 1 rax))
         RET]))))

(public def equal (Stateful VFunction)
  (compareOp "equal__uncurried" JE))

(public def notEqual (Stateful VFunction)
  (compareOp "notEqual__uncurried" JNE))

(public def lessThan (Stateful VFunction)
  (compareOp "lessThan__uncurried" JL))

(public def lessThanEqual (Stateful VFunction)
  (compareOp "lessThanEqual__uncurried" JLE))

(public def greaterThan (Stateful VFunction)
  (compareOp "greaterThan__uncurried" JG))

(public def greaterThanEqual (Stateful VFunction)
  (compareOp "greaterThanEqual__uncurried" JGE))

(public def monadReturn (Stateful VFunction)
  (returnState
    (function
      "return__uncurried__unmonadified"
      [(OP MOV (MR (getArg 1) rax)) RET])))

(public def monadBind (Stateful VFunction)
  (do State
    (with firstMonad     newTemp)
    (with secondMonad    newTemp)
    (with arg            newTemp)
    (with fn             newTemp)
    (with firstCallCode  (translateCall firstMonad Nothing))
    (with secondCallCode (translateCall fn (Just arg)))
    (with thirdCallCode  (translateCall secondMonad Nothing))
    (returnState
      (function
        "bind__uncurried__unmonadified"
        (concat [[(OP MOV (MR (getArg 2) firstMonad))]
                 firstCallCode
                 [(OP MOV (RR rax arg))
                  (OP MOV (MR (getArg 1) fn))]
                 secondCallCode
                 [(OP MOV (RR rax secondMonad))]
                 thirdCallCode
                 [RET]])))))

(public def primitiveCrash (Stateful VFunction)
  (do State
    (with msg newTemp)
    (returnState
      (function
        "crash"
        [(OP MOV (MR (getArg 1) msg))
         (OP MOV (IR 1 rax))
         (OP MOV (IR 2 rdi))
         (LEA (Mem (Right 8) msg Nothing) rsi)
         (OP MOV (MR (deref msg) rdx))
         (SYSCALL 3)  ; write
         (OP MOV (IR 60 rax))
         (OP MOV (IR 1 rdi))
         (SYSCALL 1)]))))  ; exit

(public defn monadify (Func Int String (Stateful VFunction))
  (numArgs fnName)
  (do State
    (with fnPtr newTemp)
    (with arg   newTemp)
    (returnState
      (function
        fnName
        (concat
          [[(PUSHI (* 8 (+ 2 numArgs)))
            (JUMP CALL "memoryAlloc")
            (unpush 1)
            (LEA (memLabelV (append fnName "__unmonadified")) fnPtr)
            (OP MOV (RM fnPtr (getField 0 rax)))
            (OP MOV (IM numArgs (getField 1 rax)))]
           (concatMap
             (lambda (i)
               [(OP MOV (MR (getArg (- (+ numArgs 1) i)) arg))
                (OP MOV (RM arg (getField (+ i 1) rax)))])
             (iterate (+ 1) 1 numArgs))
           [RET]])))))

(public def primitiveTrace (Stateful VFunction)
  (returnState
    (function
      "trace__uncurried"
      [(UN PUSH (M (getArg 2)))
       (JUMP CALL "print__uncurried__unmonadified")
       (unpush 1)
       (OP MOV (MR (getArg 1) rax))
       RET])))
