(import "Stdlib.kalyn")
(import "Util.kalyn")

;; https://refspecs.linuxfoundation.org/elf/elf.pdf
;; see page 20

(def elfIdent Bytes
  "The ELF magic header."
  (concat
    [(word8 0x7f)              ; magic bytes
     "ELF"
     (word8 2)                 ; address size, 64-bit
     (word8 1)                 ; endianness, little-endian
     (word8 1)                 ; version of ELF specification
     (replicate 9 (Char 0))]))  ; padding to 16 bytes

;; see page 18; for architecture codes see
;; <https://opensource.apple.com/source/dtrace/dtrace-90/sys/elf.h>
(defn elfHeader (Func Int Int Bytes)
  "Given meta-information about the ELF header, compute the main ELF
   header."
  (elfHeaderLength programHeaderLength)
  (let ((totalLength (+ elfHeaderLength programHeaderLength)))
    (concat
      [elfIdent
       (word16 3)                    ; file type, relocatable executable
       (word16 62)                   ; architecture, x86_64
       (word32 1)                    ; object file version
       (word64 totalLength)          ; entry point in virtual memory
       (word64 elfHeaderLength)      ; program header offset
       (word64 0)                    ; section header offset, unused
       (word32 0)                    ; processor-specific flags, none needed
       (word16 elfHeaderLength)      ; ELF header size
       (word16 programHeaderLength)  ; program header entry length
       (word16 1)                    ; program header entry count
       (word16 0)                    ; section header entry size, unused
       (word16 0)                    ; section header entry count, unused
       (word16 0)])))                ; index of string table in section header, unused

;; see page 40
(defn programHeader (Func Int Int Int Bytes)
  "Given meta-information about the ELF header, compute the program
   header. It only has a code section."
  (elfHeaderLength programHeaderLength imageSize)
  (let ((totalLength (+ elfHeaderLength programHeaderLength)))
    (concat
      [(word32 1)            ; segment type, loadable code/data
       (word32 0x7)          ; permissions, allow all (see page 73)
       (word64 totalLength)  ; offset from beginning of file
       (word64 totalLength)  ; virtual address at which to map code/data
       (word64 0)            ; physical address at which to map, unused
       (word64 imageSize)    ; number of bytes listed in file image
       (word64 imageSize)    ; number of bytes to reserve in memory
       (word64 0)])))        ; alignment, none needed

(public defn link (Func Bytes Bytes)
  "Given the combined code and data sections, wrap them in an ELF
   header."
  (code)
  (let (((Pair ehdr phdr)
         (fixedPoint
           (==Pair ==String ==String)
           (Pair [] [])
           (lambda ((Pair ehdr phdr))
             (let ((elen (length ehdr))
                   (plen (length phdr))
                   (imageSize (length code)))
               (Pair
                 (elfHeader     elen plen)
                 (programHeader elen plen imageSize)))))))
    (concat [ehdr phdr code])))
