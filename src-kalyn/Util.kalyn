(import "Stdlib.kalyn")

(public defn word8 (Func Word8 Bytes)
  (v)
  [(Char v)])

(public defn word16 (Func Word16 Bytes)
  (v)
  [(Char      v   )
   (Char (shr v 8))])

(public defn word32 (Func Word32 Bytes)
  (v)
  [(Char      v    )
   (Char (shr v 8) )
   (Char (shr v 16))
   (Char (shr v 24))])

(public defn word64 (Func Word64 Bytes)
  (v)
  [(Char      v    )
   (Char (shr v 8) )
   (Char (shr v 16))
   (Char (shr v 24))
   (Char (shr v 32))
   (Char (shr v 40))
   (Char (shr v 48))
   (Char (shr v 56))])

(public def int8 (Func Int8 Bytes)
  word8)

(public def int16 (Func Int16 Bytes)
  word16)

(public def int32 (Func Int32 Bytes)
  word32)

(public def int64 (Func Int64 Bytes)
  word64)

(public defn fixedPoint (Func (Eq a) a (Func a a) a)
  "Compute the least fixed point of a function. Given an equality
   test, repeatedly apply the function to its argument until two
   successive values are the same, then return the first of them."
  (eq x f)
  (let ((fx (f x)))
    (if (eq x fx)
      x
      (fixedPoint eq fx f))))

(public defn isAlphaNum (Func Char Bool)
  ((Char c))
  (or
    (and
      (>=Int c 0x30)
      (<=Int c 0x39))
    (and
      (>=Int c 0x41)
      (<=Int c 0x5a))
    (and
      (>=Int c 0x61)
      (<=Int c 0x7a))))

(public defn isLower (Func Char Bool)
  ((Char c))
  (and
    (>=Int c 0x61)
    (<=Int c 0x7a)))

(public defn isDigit (Func Char Bool)
  ((Char c))
  (and
    (>=Int 0x30)
    (<=Int 0x39)))

(public defn isSpace (Func Char Bool)
  (c)
  (case c
    (' ' True)
    ('\t' True)
    ('\n' True)
    ('\r' True)
    ('\v' True)
    ('\f' True)
    (_ False)))

;; important properties: deterministic, stateless, and injective
(public def sanitize (Func String String)
  (concatMap (lambda (c@(Char i))
               (if (isAlphaNum c)
                 [c]
                 (append "_u" (showInt i))))))

(public defn listUnique (Func (Ord k) (List k) Bool)
  (cmp ks)
  (==Int (length ks) (setSize (setFromList cmp ks))))
