(import "Stdlib.kalyn")

(defn word8 (Func Word8 Bytes)
  (v)
  [(Char v)])

(defn word16 (Func Word16 Bytes)
  (v)
  [(Char      v   )
   (Char (shr v 8))])

(defn word32 (Func Word32 Bytes)
  (v)
  [(Char      v    )
   (Char (shr v 8) )
   (Char (shr v 16))
   (Char (shr v 24))])

(defn word64 (Func Word64 Bytes)
  (v)
  [(Char      v    )
   (Char (shr v 8) )
   (Char (shr v 16))
   (Char (shr v 24))
   (Char (shr v 32))
   (Char (shr v 40))
   (Char (shr v 48))
   (Char (shr v 56))])

(def int8 (Func Int8 Bytes)
  word8)

(def int16 (Func Int16 Bytes)
  word16)

(def int32 (Func Int32 Bytes)
  word32)

(def int64 (Func Int64 Bytes)
  word64)

(public defn fixedPoint (Func (Eq a) a (Func a a) a)
  "Compute the least fixed point of a function. Given an equality
   test, repeatedly apply the function to its argument until two
   successive values are the same, then return the first of them."
  (eq x f)
  (let ((fx (f x)))
    (if (eq x fx)
      x
      (fixedPoint eq fx f))))
