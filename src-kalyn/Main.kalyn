(import "AST.kalyn")
(import "Assembly.kalyn")
(import "Stdlib.kalyn")

(import "Lexer.kalyn")
(import "Reader.kalyn")
(import "Parser.kalyn")
(import "Bundler.kalyn")
(import "Resolver.kalyn")
(import "Translator.kalyn")
(import "Liveness.kalyn")
(import "RegisterAllocator.kalyn")
(import "Boilerplate.kalyn")
(import "Assembler.kalyn")
(import "Linker.kalyn")

(def helloWorld Decl
  (Def
    True "main" (Type [] "IO" [(Type [] "Empty" [])])
    (Call
      (Variable "returnIO")
      (Variable "Empty"))))

(def empty Decl
  (Data
    False (TypeSpec "Empty" []) [(Pair "Empty" [])]))

(def helloWorldBundle Bundle
  (Bundle
    "Main.kalyn"
    (mapFromList
      compareString
      [(Pair
         "Main.kalyn"
         (Pair
           [helloWorld empty] []))])))

(def helloWorldResolver Resolver
  (Resolver
    (mapFromList
      compareString
      [(Pair
         "Main.kalyn"
         (Pair
           (mapFromList
             compareString
             [(Pair
                "main"
                (SymDef
                  "__main"
                  (Type [] "IO" [(Type [] "__Empty" [])])
                  0))
              (Pair
                "returnIO"
                (SymDef
                  "return"
                  (Type [] "Func" [(Type [] "a" [])
                                   (Type [] "IO" [(Type [] "a" [])])])
                  1))
              (Pair
                "Empty"
                (SymData
                  "__Empty"
                  0 0 1 False
                  (TypeSpec "Empty" [])
                  []))])
           (mapEmpty compareString)))])))

(defn bundlerRead (Func String (IO (List Decl)))
  (inputFilename)
  (do IO
    (let inputBasename (takeFileName inputFilename))
    (with str (readFile inputFilename))
    (print (concat ["Lexer (" inputBasename ")\n"]))
    (let tokens (tokenize str))
    (print (concat ["Reader (" inputBasename ")\n"]))
    (let forms (readModule tokens))
    (print (concat ["Parser (" inputBasename ")\n"]))
    (let decls (parseModule forms))
    (returnIO decls)))

(public def main (IO Empty)
  (do IO
    (with bundle
      (readBundle (print "Bundler\n") bundlerRead "./src-kalyn/Main.kalyn"))
    (print "Resolver\n")
    (let resolver (resolveBundle bundle))
    (print "Translator\n")
    (let (Pair state prog)
      ((runState 0)
       (translateBundle helloWorldResolver helloWorldBundle)))
    ;; (writeFile "out-kalyn-rec/MainVirtual.S" (showProgram showVR prog))
    (print "Liveness\n")
    (let liveness (computeProgramLiveness prog))
    (print "RegisterAllocator\n")
    (let physical
      ((evalState state)
       (allocateProgramRegs prog liveness)))
    ;; (writeFile "out-kalyn-rec/MainRaw.S" (showProgram showRegister physical))
    (print "Boilerplate\n")
    (let physical* (addProgramBoilerplate physical))
    ;; (writeFile "out-kalyn-rec/Main.S" (showProgram showRegister physical*))
    (print "Assembler\n")
    (let assembled (assemble physical*))
    (print "Linker\n")
    (let bin (link assembled))
    (writeFile "out-kalyn-rec/Main" bin)
    (setFileMode "out-kalyn-rec/Main" 0o755)))
