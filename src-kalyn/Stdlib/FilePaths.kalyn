(import "../Stdlib.kalyn")

(public defn takeDirectory (Func FilePath FilePath)
  "Given an absolute path, strip off the last component. Don't leave a
   trailing slash."
  (path)
  (reverse
    (tail
      (dropWhile
        (comp not (==Char '/'))
        (reverse path)))))

(public defn takeFileName (Func FilePath FilePath)
  "Given a path, return only the last component. This will be empty if
   the given path ends in a slash."
  (path)
  (reverse
    (takeWhile
      (comp not (==Char '/'))
      (reverse path))))

(public defn expandPath (Func (Maybe FilePath) FilePath (IO FilePath))
  "Expand a relative or absolute path to be absolute, relative to
   either the current working directory or a provided working
   directory (which must be absolute)."
  (workdir relpath)
  (case relpath
    ((Cons '/' _) (returnIO relpath))
    (_ (do IO
         (with workdir
           (case workdir
             (Nothing getWorkingDirectory)
             ((Just workdir) (returnIO workdir))))
         (let workdirParts
           (reverse (filter notNull (split ==Char '/' workdir))))
         (let relpathParts
           (filter notNull (split ==Char '/' relpath)))
         (let workdirParts*
           (foldl
             (lambda (workdirParts relpathPart)
               (case relpathPart
                 ("." workdirParts)
                 (".." (tail workdirParts))
                 (_ (Cons relpathPart workdirParts))))
             workdirParts
             relpathParts))
         (returnIO
           (Cons '/' (intercalate "/" (reverse workdirParts*))))))))
