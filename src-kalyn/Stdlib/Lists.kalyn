(import "../Stdlib.kalyn")

(public defn foldr (Func (Func a b b) b (List a) b)
  (func init elts)
  (case elts
    (Null init)
    ((Cons fst rst)
     (func fst (foldr func init rst)))))

(public defn foldl (Func (Func b a b) b (List a) b)
  (func init elts)
  (case elts
    (Null init)
    ((Cons fst rst)
     (foldl func (func init fst) rst))))

(public defn map (Func (Func a b) (List a) (List b))
  (func)
  (foldr (lambda (elt rst)
           (Cons (func elt) rst))
         Null))

(public defn filter (Func (Func a Bool) (List a) (List a))
  (pred)
  (foldr (lambda (elt rst)
           (case (pred elt)
             (False rst)
             (True (Cons elt rst))))
         Null))

(public def length (Func (List a) Int)
  (foldr (const (+ 1)) 0))

(public defn join (Func (List a) (List a) (List a))
  (left right)
  (foldr Cons right left))

(public defn replicate (Func Int a (List a))
  (n elt)
  (case (<=Int n 0)
    (False (Cons elt (replicate (- n 1) elt)))
    (True Null)))

(public def reverse (Func (List a) (List a))
  (foldl (flip Cons) []))

(public defn append (Func (List a) (List a) (List a))
  (left right)
  (foldr Cons right left))

(public def concat (Func (List (List a)) (List a))
  (foldr append []))

(public defn concatMap (Func (Func a (List b)) (List a) (List b))
  (func)
  (comp concat (map func)))

(public defn intersperse (Func a (List a) (List a))
  (elt list)
  (case list
    ([] [])
    ([x] [x])
    ((Cons x xs)
     (Cons x (Cons elt (intersperse elt xs))))))

(public defn intercalate (Func (List a) (List (List a)) (List a))
  (xs xss)
  (concat (intersperse xs xss)))

(public defn head (Func (List a) a)
  ((Cons fst _))
  fst)

(public defn tail (Func (List a) (List a))
  ((Cons _ rst))
  rst)

(public defn iterate (Func (Func a a) a Int (List a))
  (func start num)
  (if (<=Int num 0)
    []
    (Cons start (iterate func (func start) (- num 1)))))

(public defn findIndices (Func (Func a Bool) (List a) (List Int))
  (pred)
  (let ((findIndices (lambda (idx elts)
                       (case elts
                         (Null Null)
                         ((Cons elt elts)
                          (if (pred elt)
                            (Cons idx (findIndices (+ idx 1) elts))
                            (findIndices (+ idx 1) elts)))))))
    (findIndices 0)))

(public defn findIndex (Func (Func a Bool) (List a) Int)
  (pred)
  (comp head (findIndices pred)))

(public defn take (Func Int (List a) (List a))
  (n elts)
  (if (<=Int n 0)
    Null
    (case elts
      (Null Null)
      ((Cons fst rst)
       (Cons fst (take (- n 1) rst))))))

(public defn drop (Func Int (List a) (List a))
  (n elts)
  (if (<=Int n 0)
    elts
    (case elts
      (Null Null)
      ((Cons fst rst)
       (drop (- n 1) rst)))))

(public defn scanl (Func (Func b a b) b (List a) (List b))
  (f q ls)
  (Cons q (case ls
            (Null Null)
            ((Cons x xs)
             (scanl f (f q x) xs)))))

(public defn zipWith (Func (Func a b c) (List a) (List b) (List c))
  (func as bs)
  (case (Pair as bs)
    ((Pair (Cons a as) (Cons b bs))
     (Cons (func a b) (zipWith func as bs)))
    (_ Null)))

(public def zip (Func (List a) (List b) (List (Pair a b)))
  (zipWith Pair))

(public defn last (Func (List a) a)
  (elts)
  (case elts
    ((Cons elt Null) elt)
    ((Cons _ rst) (last rst))))

;; caution: does not preserve order!!
(public defn nub (Func (Ord a) (List a) (List a))
  (cmp)
  (comp setToList (setFromList cmp)))

(public defn foldr1 (Func (Func a a a) (List a) a)
  (func elts)
  (case elts
    ([init] init)
    ((Cons elt elts)
     (func elt (foldr1 func elts)))))

(public defn foldl1 (Func (Func a a a) (List a) a)
  (func (Cons init elts))
  (foldl func init elts))

;; caution: deletes duplicates!!
(public defn sort (Func (Ord a) (List a) (List a))
  (cmp elts)
  (setToList (setFromList cmp elts)))

(public defn sortOn (Func (Func a b) (Ord b) (List a) (List a))
  (key cmp)
  (sort (lambda (e1 e2)
          (cmp (key e1) (key e2)))))

(public defn null (Func (List a) Bool)
  (elts)
  (case elts
    (Null True)
    (_ False)))

(public def notNull (Func (List a) Bool)
  (comp not null))

(public defn elem (Func (Eq a) a (List a) Bool)
  (== elt elts)
  (notNull (findIndices (== elt) elts)))

(public defn notElem (Func (Eq a) a (List a) Bool)
  (== elt elts)
  (null (findIndices (== elt) elts)))

(public defn unzip (Func (List (Pair a b)) (Pair (List a) (List b)))
  (pairs)
  (case pairs
    (Null (Pair Null Null))
    ((Cons (Pair left right) pairs)
     (let (((Pair lefts rights)
            (unzip pairs)))
       (Pair (Cons left lefts)
             (Cons right rights))))))

(public defn any (Func (Func a Bool) (List a) Bool)
  (func elts)
  (case elts
    (Null False)
    ((Cons elt elts)
     (if (func elt)
       True
       (any func elts)))))

(public defn all (Func (Func a Bool) (List a) Bool)
  (func elts)
  (case elts
    (Null True)
    ((Cons elt elts)
     (if (func elt)
       (all func elts)
       False))))

(public defn splitAt (Func Int (List a) (Pair (List a) (List a)))
  (n elts)
  (if (<=Int n 0)
    (Pair Null elts)
    (case elts
      (Null (Pair Null Null))
      ((Cons elt elts)
       (let (((Pair left right)
              (splitAt (- n 1) elts)))
         (Pair (Cons elt left) right))))))

(public defn zipWith3 (Func (Func a b c d) (List a) (List b) (List c) (List d))
  (func as bs cs)
  (case (Triplet as bs cs)
    ((Triplet (Cons a as) (Cons b bs) (Cons c cs))
     (Cons (func a b c) (zipWith3 func as bs cs)))
    (_ Null)))

(public defn init (Func (List a) (List a))
  ((Cons elt elts))
  (case elts
    (Null Null)
    ((Cons _ _) (Cons elt (init elts)))))

(public defn span (Func (Func a Bool) (List a) (Pair (List a) (List a)))
  (pred elts)
  (case elts
    (Null (Pair Null Null))
    (all@(Cons elt elts)
     (if (pred elt)
       (let (((Pair left right)
              (span pred elts)))
         (Pair (Cons elt left) right))
       (Pair Null all)))))

(public defn split (Func (Eq a) a (List a) (List (List a)))
  (== sep elts)
  (case elts
    (Null [Null])
    ((Cons elt elts)
     (if (== elt sep)
       (Cons Null (split == sep elts))
       (let (((Cons part parts)
              (split == sep elts)))
         (Cons (Cons elt part) parts))))))

(public defn maximum (Func (Ord a) (List a) a)
  (cmp (Cons elt elts))
  (case elts
    (Null elt)
    ((Cons _ _)
     (let ((max (maximum cmp elts)))
       (case (cmp max elt)
         (GT max)
         (_ elt))))))

(public defn minimum (Func (Ord a) (List a) a)
  (cmp (Cons elt elts))
  (case elts
    (Null elt)
    ((Cons _ _)
     (let ((min (minimum cmp elts)))
       (case (cmp min elt)
         (GT min)
         (_ elt))))))

(public defn takeWhile (Func (Func a Bool) (List a) (List a))
  (pred elts)
  (case elts
    (Null Null)
    ((Cons elt elts)
     (if (pred elt)
       (Cons elt (takeWhile pred elts))
       Null))))

(public defn dropWhile (Func (Func a Bool) (List a) (List a))
  (pred elts)
  (case elts
    (Null Null)
    (all@(Cons elt elts)
     (if (pred elt)
       (dropWhile pred elts)
       all))))
