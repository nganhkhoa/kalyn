(import "../../Stdlib.kalyn")

(public alias (Set k)
  "Ordered set. Embeds a comparison function."
  (Map k Empty))

(public def setEmpty (Func (Ord k) (Set k))
  "Create an empty set with the given comparison function."
  mapEmpty)

(public def setNull (Func (Set k) Bool)
  "Check if the set is empty (has no elements)."
  mapNull)

(public def setSize (Func (Set k) Int)
  "Return the number of elements in the set."
  mapSize)

(public defn setInsert (Func k (Set k) (Set k))
  "Insert a key into the set, replacing any existing value that
   compares equal."
  (k)
  (mapInsert k Empty))

(public def setDelete (Func k (Set k) (Set k))
  "Delete a key from the set if it's present, returning a new set."
  mapDelete)

(public defn setFromList (Func (Ord k) (List k) (Set k))
  "Given an unordered list of keys, create a set with the provided
   comparison function."
  (cmp)
  (comp (mapFromList cmp) (map (lambda (k) (Pair k Empty)))))

(public def setToList (Func (Set k) (List k))
  "Convert a set to a list of its keys in ascending order."
  mapKeys)

(public def setUnion (Func (Set k) (Set k) (Set k))
  "Left-biased set union."
  mapUnion)

(public def setUnions (Func (Ord k) (List (Set k)) (Set k))
  "Left-biased union of a list of sets."
  mapUnions)

(public def set\\ (Func (Set k) (Set k) (Set k))
  "Set difference. Remove all the elements of the right-hand set from
   the left-hand set."
  map\\)

(public defn setFoldr (Func (Func k a a) a (Set k) a)
  "Right fold over a set."
  (func init)
  (comp (foldr func init) setToList))

(public def setFilter (Func (Func k Bool) (Set k) (Set k))
  "Filter a set by the given predicate."
  mapFilter)

(public def setMember (Func k (Set k) Bool)
  "Check if the given element is in the set."
  mapMember)

(public defn setHead (Func (Set k) (Maybe k))
  "Get an arbitrary key from the set."
  (set)
  (case (mapHead set)
    (Nothing Nothing)
    ((Just (Pair k _)) (Just k))))

(public def setNotMember (Func k (Set k) Bool)
  "Check if the given element is NOT in the set."
  mapNotMember)

(public defn setMap (Func (Ord b) (Func a b) (Set a) (Set b))
  "Map a function over a set."
  (cmp func set)
  (setFromList cmp (map func (setToList set))))

(public defn setSingleton (Func (Ord k) k (Map k v))
  "Make a set with just one element."
  (cmp k)
  (mapSingleton cmp k Empty))
