;; http://hackage.haskell.org/package/TreeStructures-0.0.2/docs/src/Data-Tree-Splay.html
;; with bugfix for insert

(import "../../Stdlib.kalyn")

(public data (Map k v)
  "Key-value map using self-balancing tree. Embeds a comparison
   function for the keys. Kept in sorted order by key value."
  (Map (Ord k) (Node k v)))

(data (Node k v)
  "Internal tree node."
  Leaf (Branch k v Int (Node k v) (Node k v)))

(public defn mapEmpty (Func (Ord k) (Map k v))
  "Create an empty map with the given comparison function."
  (cmp)
  (Map cmp Leaf))

(public defn mapNull (Func (Map k v) Bool)
  "Check if the map is empty (has no elements)."
  ((Map _ root))
  (case root
    (Leaf True)
    ((Branch _ _ _ _ _) False)))

(defn size (Func (Node k v) Int)
  "Return the number of elements in an internal tree node."
  (node)
  (case node
    (Leaf 0)
    ((Branch _ _ d _ _) d)))

(public defn mapSize (Func (Map k v) Int)
  "Return the number of elements in the map."
  ((Map _ root))
  (size root))

(defn lookup (Func (Ord k) k (Node k v) (Node k v))
  "Do a splay lookup on an internal tree node. The provided key will
   be splayed to the root of the tree if it's present, otherwise the
   nearest node is splayed. Return the new root."
  (cmp k* t)
  (case t
    (Leaf Leaf)
    (t@(Branch k _ _ l r)
     (case (cmp k k*)
       (EQ t)
       (GT (case (lookup cmp k* l)
             (Leaf t)
             (lt (zig lt t))))
       (LT (case (lookup cmp k* r)
             (Leaf t)
             (rt (zag t rt))))))))

(defn zig (Func (Node k v) (Node k v) (Node k v))
  "Do a zig rotation. The first argument is rotated up and the new
   root returned."
  (left right)
  (case (Pair left right)
    ((Pair (Branch k1 v1 _ l1 r1) (Branch k v d _ r))
     (Branch k1 v1 d l1 (Branch k v (- (- d (size l1)) 1) r1 r)))
    (_ (error "tree corruption\n"))))

(defn zag (Func (Node k v) (Node k v) (Node k v))
  "Do a zag rotation. The second argument is rotated up and the new
   root returned."
  (left right)
  (case (Pair left right)
    ((Pair (Branch k v d l _) (Branch k1 v1 _ l1 r1))
     (Branch k1 v1 d (Branch k v (- (- d (size r1)) 1) l l1) r1))
    (_ (error "tree corruption\n"))))

;; XXX: Splay trees are really not appropriate for the implementation
;; because we need to be able to do a lookup without modifying the
;; tree. Workaround for now is to just not splay on a lookup and hope
;; the amortized analysis doesn't break too badly in practice.
(public defn mapLookup (Func k (Map k v) (Maybe v))
  "Try to look up the value for a key. Return Nothing if the key is
   not present."
  (k (Map cmp t))
  (case (lookup cmp k t)
    (Leaf Nothing)
    ((Branch k* v _ _ _)
     (case (cmp k k*)
       (EQ (Just v))
       (_ Nothing)))))

(defn insert (Func (Ord k) k v (Node k v) (Node k v))
  "Insert a key-value pair into the map, replacing the existing
   mapping if one exists. Assume that the key was already splayed to
   the top."
  (cmp k v t)
  (case t
    (Leaf (Branch k v 0 Leaf Leaf))
    ((Branch k1 v1 d l r)
     (case (cmp k1 k)
       (LT (Branch k v (+ d 1) (Branch k1 v1 (+ (- d (size r)) 1) l Leaf) r))
       (GT (Branch k v (+ d 1) l (Branch k1 v1 (+ (- d (size l)) 1) Leaf r)))
       (EQ (Branch k v d l r))))))

(public defn mapInsert (Func k v (Map k v) (Map k v))
  "Insert a key-value pair into the map, replacing the existing
   mapping if one exists."
  (k v (Map cmp t))
  (Map
    cmp
    (insert cmp k v (lookup cmp k t))))

(defn nodeHead (Func (Node k v) (Pair k v))
  "Get the key-value pair of the root."
  (t)
  (case t
    (Leaf (error "tree corruption\n"))
    ((Branch k v _ _ _) (Pair k v))))

(public defn mapHead (Func (Map k v) (Maybe (Pair k v)))
  "Get an arbitrary key-value pair from the map."
  ((Map _ t))
  (case t
    (Leaf Nothing)
    ((Branch k v _ _ _)
     (Just (Pair k v)))))

(defn nodeTail (Func (Node k v) (Node k v))
  "Remove the root of the tree and merge its subtrees."
  (t)
  (case t
    (Leaf (error "tree corruption\n"))
    ((Branch _ _ _ Leaf r) r)
    ((Branch _ _ _ l Leaf) l)
    ((Branch _ _ _ l r)
     (case (splayRight l)
       ((Branch k v d l1 Leaf)
        (Branch k v (+ d (size r)) l1 r))
       (_ (error "tree corruption\n"))))))

(public defn mapDelete (Func k (Map k v) (Map k v))
  "Delete a key from the map if it's present, returning a new map."
  (k (Map cmp t))
  (Map
    cmp
    (case t
      (Leaf Leaf)
      (_ (case (lookup cmp k t)
           (t*@(Branch k1 _ _ _ _)
            (case (cmp k k1)
              (EQ (nodeTail t*))
              (_ t*)))
           (Leaf (error "tree corruption\n")))))))

(defn splayRight (Func (Node k v) (Node k v))
  (t)
  (case t
    (Leaf Leaf)
    (h@(Branch _ _ _ _ Leaf) h)
    ((Branch k1 v1 d1 l1 (Branch k2 v2 _ l2 r2))
     (splayRight (Branch k2 v2 d1 (Branch k1 v1 (- d1 (size r2)) l1 l2) r2)))))

(defn splayLeft (Func (Node k v) (Node k v))
  (t)
  (case t
    (Leaf Leaf)
    (h@(Branch _ _ _ Leaf _) h)
    ((Branch k1 v1 d1 (Branch k2 v2 _ l2 r2) r1)
     (splayLeft (Branch k2 v2 d1 l2 (Branch k1 v1 (- d1 (size l2)) r2 r1))))))

(public defn mapFromList (Func (Ord k) (List (Pair k v)) (Map k v))
  "Given an unordered list of key-value pairs, create a map with the
   provided comparison function. If the same key appears more than
   once then the later one wins."
  (cmp)
  (foldr (uncurry mapInsert) (mapEmpty cmp)))

(public defn mapToList (Func (Map k v) (List (Pair k v)))
  "Convert a map to a list of its key-value pairs in ascending order."
  ((Map _ t))
  (let ((toList (lambda (t)
                  (case t
                    (Leaf [])
                    (h@(Branch _ _ _ Leaf _)
                     (Cons (nodeHead h) (toList (nodeTail h))))
                    (h (toList (splayLeft h)))))))
    (toList t)))

(public defn mapAlter (Func
                        (Func (Maybe v) (Maybe v))
                        k (Map k v) (Map k v))
  (func k (Map cmp t))
  (Map
    cmp
    (case (lookup cmp k t)
      (Leaf
       (case (func Nothing)
         (Nothing Leaf)
         ((Just v)
          (Branch k v 0 Leaf Leaf))))
      (br@(Branch k* v* d l r)
       (case (cmp k k*)
         (EQ (case (func (Just v*))
               (Nothing (nodeTail br))
               ((Just v) (Branch k* v d l r))))
         (_ (case (func Nothing)
              (Nothing br)
              ((Just v)
               (insert cmp k v br)))))))))

(defn mapWithKey (Func (Func k a b) (Node k a) (Node k b))
  "Map a function over an internal node to produce a new one."
  (func node)
  (case node
    (Leaf Leaf)
    ((Branch k a d l r)
     (Branch k (func k a) d (mapWithKey func l) (mapWithKey func r)))))

(defn mapFromListWithKey
  (Func (Ord k) (Func k v v v) (List (Pair k v)) (Map k v))
  "Given an unordered list of key-value pairs, create a map with the
   provided comparison function. If the same key appears more than
   once then the given combining function is used."
  (cmp comb pairs)
  (foldr
    (lambda ((Pair k v) m)
      (mapAlter
        (lambda (existing)
          (case existing
            (Nothing (Just v))
            ((Just v*) (Just (comb k v* v)))))
        k m))
    (mapEmpty cmp)
    pairs))

(public defn mapMapWithKey (Func (Func k a b) (Map k a) (Map k b))
  "Map a function over the values of a map to produce a new map with
   the same keys. The mapping function also gets the keys but can't
   change them."
  (func (Map cmp t))
  (Map cmp (mapWithKey func t)))

(public defn mapMap (Func (Func a b) (Map k a) (Map k b))
  "Map a function over the values of a map to produce a new map with
   the same keys."
  (func m)
  (mapMapWithKey (const func) m))

(public defn mapUnionWithKey
  (Func (Func k v v v) (Map k v) (Map k v) (Map k v))
  "Merge two maps with a combining function. The combined map uses the
   comparison function from the left-hand map."
  (comb left right)
  (foldr (lambda ((Pair k rv))
           (mapAlter
             (lambda (existing)
               (case existing
                 (Nothing (Just rv))
                 ((Just lv) (Just (comb k lv rv)))))
             k))
         left
         (mapToList right)))

(public def mapUnion
  (Func (Map k v) (Map k v) (Map k v))
  "Left-biased union of two maps. The combined map uses the comparison
   function from the left-hand map."
  (mapUnionWithKey
    (lambda (_ lv _)
      lv)))

(public defn mapUnions
  (Func (Ord k) (List (Map k v)) (Map k v))
  "Left-biased union of a list of maps. The provided comparison
   function replaces the ones used in the constituent maps."
  (cmp)
  (foldl mapUnion (mapEmpty cmp)))

(public def mapKeys (Func (Map k v) (List k))
  "Return the list of keys in a map."
  (comp (map fst) mapToList))

(public def mapElems (Func (Map k v) (List v))
  "Return the list of values in a map."
  (comp (map snd) mapToList))

(public defn map\\ (Func (Map k v) (Map k v) (Map k v))
  "Map difference. Remove all the elements of the right-hand map from
   the left-hand map."
  (left right)
  (foldr mapDelete left (mapKeys right)))

(public defn mapFilter (Func (Func k Bool) (Map k v) (Map k v))
  "Filter a map to only the keys that pass the given predicate."
  (pred m@(Map cmp _))
  (mapFromList cmp (filter (comp pred fst) (mapToList m))))

(public defn mapMember (Func k (Map k v) Bool)
  "Check if the given key is in the map."
  (k m)
  (case (mapLookup k m)
    (Nothing False)
    ((Just _) True)))

(public defn map! (Func k (Map k v) v)
  "Get the value for the given key, or throw an error if it's not
   present."
  (k m)
  (case (mapLookup k m)
    (Nothing (error "no such key in map\n"))
    ((Just v) v)))

(public defn mapNotMember (Func k (Map k v) Bool)
  "Check if the given key is NOT in the map."
  (k)
  (comp not (mapMember k)))

(public defn mapSingleton (Func (Ord k) k v (Map k v))
  "Make a map with just one key-value mapping."
  (cmp k v)
  (mapInsert k v (mapEmpty cmp)))
