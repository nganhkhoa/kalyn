(import "Stdlib.kalyn")
(import "Tokens.kalyn")
(import "Util.kalyn")

(def disallowedChars String
  ";()[]@")

(defn getStringChar (Func String (Triplet Char String Bool))
  (str)
  (case str
    (Null (error "unexpected end of string literal\n"))
    ((Cons '\\' (Cons 'x' (Cons a (Cons b s))))
     (Triplet (Char (readInt ['0' 'x' a b])) s True))
    ((Cons '\\' (Cons c s))
     (Triplet
       (case c
         ('0' '\0')
         ('a' '\a')
         ('b' '\b')
         ('f' '\f')
         ('n' '\n')
         ('r' '\r')
         ('t' '\t')
         ('v' '\v')
         ( _    c ))
       s
       True))
    ((Cons c s)
     (Triplet c s False))))

(defn readString (Func Char String (Pair String String))
  (delim str)
  (let (((Triplet char rest escaped) (getStringChar str)))
    (if (and (==Char char delim) (not escaped))
      (Pair "" rest)
      (let (((Pair parsed rest*) (readString delim rest)))
        (Pair (Cons char parsed) rest*)))))

(defn getSymbolToken (Func String (Pair (Maybe Token) String))
  (s)
  (let (((Pair v s*) (span (lambda (c)
                             (and
                               (not (isSpace c))
                               (notElem ==Char c disallowedChars)))
                           s)))
    (Pair (Just (SYMBOL v)) s*)))

(defn getToken (Func String (Pair (Maybe Token) String))
  (str)
  (case str
    (Null (error "shouldn't be getting a token from an empty string\n"))
    (full@(Cons c s)
     (if (isSpace c)
       (Pair Nothing s)
       (case c
         (';' (Pair Nothing (tail (dropWhile (comp not (==Char '\n')) s))))
         ('(' (Pair (Just LPAREN) s))
         (')' (Pair (Just RPAREN) s))
         ('[' (Pair (Just LBRACKET) s))
         (']' (Pair (Just RBRACKET) s))
         ('@' (Pair (Just AT) s))
         ('"' (let (((Pair parsed rest) (readString '"' s)))
                (Pair (Just (STRING parsed)) rest)))
         ('\'' (let (((Pair parsed rest) (readString '\'' s)))
                 (if (==Int (length parsed) 1)
                   (Pair (Just (CHAR (head parsed))) rest)
                   (error (concat ["character literal "
                                   full
                                   " had more than one character\n"])))))
         ('-' (case s
                ((Cons c _)
                 (if (isDigit c)
                   (let (((Pair d s*) (span isAlphaNum s)))
                     (Pair (Just (INTEGER (readInt (Cons '-' d)))) s*))
                   (getSymbolToken full)))
                (_ (getSymbolToken full))))
         (_ (if (isDigit c)
              (let (((Pair d s*) (span isAlphaNum s)))
                (Pair (Just (INTEGER (readInt d))) s*))
              (getSymbolToken full))))))))

(public defn tokenize (Func String (List Token))
  (str)
  (let ((getTokens
         (lambda (str)
           (case str
             (Null Null)
             (s (let (((Pair t s*) (getToken s)))
                  (Cons t (getTokens s*))))))))
    (catMaybes (getTokens str))))
