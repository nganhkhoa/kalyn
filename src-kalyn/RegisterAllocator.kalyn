(import "Assembly.kalyn")
(import "Liveness.kalyn")
(import "Stdlib.kalyn")

;; http://web.cs.ucla.edu/~palsberg/course/cs132/linearscan.pdf

(public alias Allocation
  (Map VR Register))

(alias Interval (Pair Int Int))

(defn computeLivenessIntervals (Func FnLiveness (Map VR Interval))
  ((FnLiveness _ livenesses))
  (let ((alter
         (lambda (idx)
           (mapAlter (lambda (interval)
                       (case interval
                         (Nothing
                          (Just (Pair idx (+ idx 1))))
                         ((Just (Pair start _))
                          (Just (Pair start (+ idx 1))))))))))
    (foldl
      (lambda (intervals (Pair live idx))
        (setFoldr
          (alter idx)
          intervals
          live))
      (mapEmpty compareVR)
      (zip livenesses (iterate (+ 1) 0 (length livenesses))))))

(defn intervalsIntersect (Func Interval Interval Bool)
  ((Pair a b) (Pair c d))
  (not (or (<=Int b c) (<=Int d a))))

(defn tryAllocateFunctionRegs (Func
                                FnLiveness
                                (Set VR)
                                (Either (List Temporary) Allocation))
  (liveness spillBlacklist)
  (let ((intervalMap (computeLivenessIntervals liveness))
        (disallowed (mapMapWithKey
                      (lambda (reg _)
                        (setFilter
                          (lambda (dataReg)
                            (and
                              (mapMember
                                (Physical dataReg)
                                intervalMap)
                              (intervalsIntersect
                                (map! reg intervalMap)
                                (map! (Physical dataReg) intervalMap))))
                          dataRegisters))
                      intervalMap))
        (allocate
         (lambda (spills allocs queue)
           (case queue
             (Null (Pair spills allocs))
             ((Cons cur@(Physical phys) rst)
              (allocate spills (mapInsert cur phys allocs) rst))
             ((Cons cur@(Virtual temp) rst)
              (case (let ((curInterval (map! cur intervalMap))
                          (conflictingTemps
                           (mapMaybe
                             (lambda ((Pair otherTemp otherInterval))
                               (if (intervalsIntersect
                                     curInterval
                                     otherInterval)
                                 (Just otherTemp)
                                 Nothing))
                             (mapToList intervalMap)))
                          (curDisallowed
                           (foldr
                             (lambda (conflictingTemp set)
                               (case (mapLookup conflictingTemp allocs)
                                 ((Just phys) (setInsert phys set))
                                 (Nothing set)))
                             (map! cur disallowed)
                             conflictingTemps)))
                     (setHead (set\\ dataRegisters curDisallowed)))
                (Nothing (allocate (Cons temp spills) allocs rst))
                ((Just free)
                 (allocate spills (mapInsert cur free allocs) rst)))))))
        ((Pair spilled allocation)
         (allocate
           Null
           (mapFromList
             compareVR
             (map (lambda (reg)
                    (Pair (Physical reg) reg))
                  specialRegisters))
           (sortOn
             (lambda (reg)
               (let (((Pair start end) (map! reg intervalMap)))
                 (Pair (setNotMember reg spillBlacklist)
                       (- end start))))
             (comparePair compareBool compareInt)
             (mapKeys intervalMap)))))
    (case spilled
      (Null (Right allocation))
      (_ (Left spilled)))))

(defn spillMem (Func VR (Mem VR) Bool)
  (reg (Mem _ base msi))
  (or
    (==VR base reg)
    (case msi
      (Nothing False)
      ((Just (Pair _ idx)) (==VR idx reg)))))

(defn spillInstr (Func VR (Mem VR) VInstruction (List VInstruction))
  (dir ind instr)
  (case instr
    ((OP op (IR imm reg))
     (if (==VR reg dir)
       [(OP op (IM imm ind))]
       [instr]))
    ((OP op (IM imm mem))
     (if (spillMem dir mem)
       [(OP MOV (MR ind dir))
        (OP op (IM imm mem))]
       [instr]))
    ((OP op (RR src dst))
     (if (==VR src dir)
       (if (==VR dst dir)
         [(OP MOV (MR ind dir))
          (OP op (RM dir ind))]
         [(OP MOV (MR ind dst))])
       (if (==VR dst dir)
         [(OP MOV (RM src ind))]
         [instr])))
    ((OP op (MR mem dst))
     (if (spillMem dir mem)
       (if (==VR dst dir)
         [(OP MOV (MR ind dir))
          (OP op (MR mem dir))
          (OP MOV (RM dir ind))]
         [(OP MOV (MR ind dir))
          (OP op (MR mem dst))])
       (if (==VR dst dir)
         [(OP MOV (MR mem dir))
          (OP op (RM dir ind))]
         [instr])))
    ((OP op (RM src mem))
     (if (spillMem dir mem)
       [(OP MOV (MR ind dir))
        (OP op (RM src mem))]
       (if (==VR src dir)
         [(OP MOV (MR ind dir))
          (OP op (RM dir mem))]
         [instr])))
    ((UN op (R dst))
     (if (==VR dst dir)
       [(UN op (M ind))]
       [instr]))
    ((UN op (M mem))
     (if (spillMem dir mem)
       [(OP MOV (MR ind dir))
        (UN op (M mem))]
       [instr]))
    ((MOV64 imm dst)
     (if (==VR dst dir)
       [(MOV64 imm dir)
        (OP MOV (RM dir ind))]
       [instr]))
    ((SHIFT amt op dst)
     (if (==VR dst dir)
       [(OP MOV (MR ind dir))
        (SHIFT amt op dir)
        (OP MOV (RM dir ind))]
       [instr]))
    ((LEA mem dst)
     (if (spillMem dir mem)
       (if (==VR dst dir)
         [(OP MOV (MR ind dir))
          (LEA mem dst)
          (OP MOV (RM dir ind))]
         [(OP MOV (MR ind dir))
          (LEA mem dst)])
       (if (==VR dst dir)
         [(LEA mem dir)
          (OP MOV (RM dir ind))]
         [instr])))
    ((IDIV src)
     (if (==VR src dir)
       [(OP MOV (MR ind dir))
        (IDIV dir)]
       [instr]))
    (_ [instr])))

(defn spillFunction (Func VR (Mem VR) VFunction VFunction)
  (dir ind (Function name stackSpace instrs))
  (Function
    name stackSpace
    (concatMap (spillInstr dir ind) instrs)))

(defn spillTemporary (Func Int Temporary VFunction VFunction)
  (spillIdx temp)
  (spillFunction
    (Virtual temp)
    (Mem (Right (* 8 (- 0 (+ 1 spillIdx)))) rbp Nothing)))

(defn allocateFunctionRegs (Func
                             (Set Temporary)
                             FnLiveness
                             VFunction
                             PFunction)
  (allSpilled liveness fn@(Function stackSpace name instrs))
  (case (tryAllocateFunctionRegs liveness (setMap compareVR Virtual allSpilled))
    ((Right allocation)
     (Function
       (+ stackSpace (* 8 (setSize allSpilled)))
       name
       (map
         (mapInstr
           (lambda (reg)
             (case (mapLookup reg allocation)
               (Nothing (error (concat
                                 ["in function "
                                  name
                                  ", liveness analysis found dead register"])))
               ((Just reg) reg))))
         instrs)))
    ((Left spilled)
     (let ((fn*@(Function _ fnName instrs)
            (foldr
              (uncurry spillTemporary)
              fn
              (zip
                (iterate (+ 1) (setSize allSpilled) (length spilled))
                spilled)))
           (liveness
            (assertNoFreeVariablesF fnName (computeLiveness instrs))))
       (allocateFunctionRegs
         (setUnion allSpilled (setFromList compareTemporary spilled))
         liveness fn*)))))

(public defn allocateProgramRegs (Func VProgram ProgLiveness PProgram)
  ((Program main fns datums) liveness)
  (let ((allocate (allocateFunctionRegs (setEmpty compareTemporary)))
        (main* (allocate (snd (head liveness)) main))
        (fns* (zipWith allocate (map snd (tail liveness)) fns)))
    (Program main* fns* datums)))
