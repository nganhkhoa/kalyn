(import "Assembly.kalyn")
(import "Liveness.kalyn")
(import "Stdlib.kalyn")

;; http://web.cs.ucla.edu/~palsberg/course/cs132/linearscan.pdf

(public alias Allocation
  (Map VR Register))

(alias Interval (Pair Int Int))

(defn computeLivenessIntervals (Func FnLiveness (Map VR Interval))
  ((FnLiveness _ livenesses))
  (let ((alter
         (lambda (idx)
           (mapAlter (lambda (interval)
                       (case interval
                         (Nothing
                          (Just (Pair idx (+ idx 1))))
                         ((Just (Pair start _))
                          (Just (Pair start (+ idx 1))))))))))
    (foldl
      (lambda (intervals (Pair live idx))
        (setFoldr
          (alter idx)
          intervals
          live))
      (mapEmpty compareVR)
      (zip livenesses (iterate (+ 1) 0 (length livenesses))))))

(defn intervalsIntersect (Func Interval Interval Bool)
  ((Pair a b) (Pair c d))
  (not (or (<=Int b c) (<=Int d a))))

;; arguably should use Temporary internally instead of
;; VirtualRegister. fix later!
(defn tryAllocateFunctionRegs (Func
                                FnLiveness
                                (Either (List Temporary) Allocation))
  (liveness)
  (let ((intervalMap (computeLivenessIntervals liveness))
        (disallowed (mapMapWithKey
                      (lambda (reg _)
                        (setFilter
                          (lambda (dataReg)
                            (and
                              (mapMember
                                (Physical dataReg)
                                intervalMap)
                              (intervalsIntersect
                                (map! reg intervalMap)
                                (map! (Physical dataReg) intervalMap))))
                          dataRegisters))
                      intervalMap))
        (allocate
         (lambda (spills allocs queue)
           (case queue
             (Null (Pair spills allocs))
             ((Cons cur@(Physical phys) rst)
              (allocate spills (mapInsert cur phys allocs) rst))
             ((Cons cur@(Virtual temp) rst)
              (case (let ((curInterval (map! cur intervalMap))
                          (conflictingTemps
                           (mapMaybe
                             (lambda ((Pair otherTemp otherInterval))
                               (if (intervalsIntersect
                                     curInterval
                                     otherInterval)
                                 (Just otherTemp)
                                 Nothing))
                             (mapToList intervalMap)))
                          (curDisallowed
                           (foldr
                             (lambda (conflictingTemp set)
                               (case (mapLookup conflictingTemp allocs)
                                 ((Just phys) (setInsert phys set))
                                 (Nothing set)))
                             (map! cur disallowed)
                             conflictingTemps)))
                     (setHead (set\\ dataRegisters curDisallowed)))
                (Nothing (allocate (Cons temp spills) allocs rst))
                ((Just free)
                 (allocate spills (mapInsert cur free allocs) rst)))))))
        ((Pair spilled allocation)
         (allocate
           Null
           (mapFromList
             compareVR
             (map (lambda (reg)
                    (Pair (Physical reg) reg))
                  specialRegisters))
           ;; allocate to smaller live intervals first, hopefully
           ;; meaning we spill less.
           (sortOn
             (lambda (reg)
               (let (((Pair start end) (map! reg intervalMap)))
                 ;; use pair because sortOn deletes duplicates
                 (Pair (- end start) reg)))
             (comparePair compareInt compareVR)
             (mapKeys intervalMap)))))
    (case spilled
      (Null (Right allocation))
      (_ (Left spilled)))))

(defn shouldSpillMem (Func VR (Mem VR) Bool)
  (reg (Mem _ base msi))
  (or
    (==VR base reg)
    (case msi
      (Nothing False)
      ((Just (Pair _ idx)) (==VR idx reg)))))

(defn spillMem (Func VR VR (Mem VR) (Mem VR))
  (old new (Mem disp base msi))
  (Mem
    disp
    (if (==VR base old)
      new base)
    (case msi
      (Nothing Nothing)
      ((Just (Pair scale index))
       (Just
         (Pair
           scale
           (if (==VR index old)
             new index)))))))

(defn spillInstr (Func VR (Mem VR) VInstruction (Stateful (List VInstruction)))
  (orig ind instr)
  (case instr
    ((OP op (IR imm reg))
     (if (==VR reg orig)
       (returnState [(OP op (IM imm ind))])
       (returnState [instr])))
    ((OP op (IM imm mem))
     (if (shouldSpillMem orig mem)
       (do State
         (with dir newTemp)
         (returnState
           [(OP MOV (MR ind dir))
            (OP op (IM imm (spillMem orig dir mem)))]))
       (returnState [instr])))
    ((OP op (RR src dst))
     (if (==VR src orig)
       (if (==VR dst orig)
         (do State
           (with dir newTemp)
           (returnState
             [(OP MOV (MR ind dir))
              (OP op (RM dir ind))]))
         (returnState [(OP MOV (MR ind dst))]))
       (if (==VR dst orig)
         (returnState [(OP MOV (RM src ind))])
         (returnState [instr]))))
    ((OP op (MR mem dst))
     (if (shouldSpillMem orig mem)
       (if (==VR dst orig)
         (do State
           (with dir newTemp)
           (returnState
             [(OP MOV (MR ind dir))
              (OP op (MR (spillMem orig dir mem) dir))
              (OP MOV (RM dir ind))]))
         (do State
           (with dir newTemp)
           (returnState
             [(OP MOV (MR ind dir))
              (OP op (MR (spillMem orig dir mem) dst))])))
       (if (==VR dst orig)
         (do State
           (with dir newTemp)
           (returnState
             [(OP MOV (MR (spillMem orig dir mem) dir))
              (OP op (RM dir ind))]))
         (returnState [instr]))))
    ((OP op (RM src mem))
     (if (shouldSpillMem orig mem)
       (do State
         (with dir newTemp)
         (returnState
           [(OP MOV (MR ind dir))
            (OP op (RM src (spillMem orig dir mem)))]))
       (if (==VR src orig)
         (do State
           (with dir newTemp)
           (returnState
             [(OP MOV (MR ind dir))
              (OP op (RM dir (spillMem orig dir mem)))]))
         (returnState [instr]))))
    ((UN op (R dst))
     (if (==VR dst orig)
       (returnState [(UN op (M ind))])
       (returnState [instr])))
    ((UN op (M mem))
     (if (shouldSpillMem orig mem)
       (do State
         (with dir newTemp)
         (returnState
           [(OP MOV (MR ind dir))
            (UN op (M (spillMem orig dir mem)))]))
       (returnState [instr])))
    ((MOVBRM src mem)
     (if (shouldSpillMem orig mem)
       (do State
         (with dir newTemp)
         (returnState
           [(OP MOV (MR ind dir))
            (MOVBRM src (spillMem orig dir mem))]))
       (if (==VR src orig)
         (do State
           (with dir newTemp)
           (returnState
             [(OP MOV (MR ind dir))
              (MOVBRM dir (spillMem orig dir mem))]))
         (returnState [instr]))))
    ((MOVBMR mem dst)
     (if (shouldSpillMem orig mem)
       (if (==VR dst orig)
         (do State
           (with dir newTemp)
           (returnState
             [(OP MOV (MR ind dir))
              (MOVBMR (spillMem orig dir mem) dir)
              (OP MOV (RM dir ind))]))
         (do State
           (with dir newTemp)
           (returnState
             [(OP MOV (MR ind dir))
              (MOVBMR (spillMem orig dir mem) dst)])))
       (if (==VR dst orig)
         (do State
           (with dir newTemp)
           (returnState
             [(OP MOV (MR (spillMem orig dir mem) dir))
              (MOVBRM dir ind)]))
         (returnState [instr]))))
    ((MOV64 imm dst)
     (if (==VR dst orig)
       (do State
         (with dir newTemp)
         (returnState
           [(MOV64 imm dir)
            (OP MOV (RM dir ind))]))
       (returnState [instr])))
    ((SHIFT amt op dst)
     (if (==VR dst orig)
       (do State
         (with dir newTemp)
         (returnState
           [(OP MOV (MR ind dir))
            (SHIFT amt op dir)
            (OP MOV (RM dir ind))]))
       (returnState [instr])))
    ((LEA mem dst)
     (if (shouldSpillMem orig mem)
       (if (==VR dst orig)
         (do State
           (with dir newTemp)
           (returnState
             [(OP MOV (MR ind dir))
              (LEA (spillMem orig dir mem) dst)
              (OP MOV (RM dir ind))]))
         (do State
           (with dir newTemp)
           (returnState
             [(OP MOV (MR ind dir))
              (LEA (spillMem orig dir mem) dst)])))
       (if (==VR dst orig)
         (do State
           (with dir newTemp)
           (returnState
             [(LEA (spillMem orig dir mem) dir)
              (OP MOV (RM dir ind))]))
         (returnState [instr]))))
    ((IDIV src)
     (if (==VR src orig)
       (do State
         (with dir newTemp)
         (returnState
           [(OP MOV (MR ind dir))
            (IDIV dir)]))
       (returnState [instr])))
    (_ (returnState [instr]))))

(defn spillFunction (Func VR (Mem VR) VFunction (Stateful VFunction))
  (dir ind (Function name stackSpace instrs))
  (fmapState
    (comp
      (Function name stackSpace)
      concat)
    (mapMState (spillInstr dir ind) instrs)))

(defn spillTemporary (Func Int Temporary VFunction (Stateful VFunction))
  (spillIdx temp)
  (spillFunction
    (Virtual temp)
    (Mem (Right (* 8 (- 0 (+ 1 spillIdx)))) rbp Nothing)))

(defn allocateFunctionRegs (Func
                             (Set Temporary)
                             FnLiveness
                             VFunction
                             (Stateful PFunction))
  (allSpilled liveness fn@(Function stackSpace name instrs))
  (case (tryAllocateFunctionRegs liveness)
    ((Right allocation)
     (returnState
       (Function
         (+ stackSpace (* 8 (setSize allSpilled)))
         name
         (map
           (mapInstr
             (lambda (reg)
               (case (mapLookup reg allocation)
                 (Nothing (error (concat
                                   ["in function "
                                    name
                                    ", liveness analysis found dead register "
                                    (showVR reg)
                                    "\n"])))
                 ((Just reg) reg))))
           instrs))))
    ((Left spilled)
     (do State
       (with fn*@(Function _ fnName instrs)
         (foldMState
           (flip (uncurry spillTemporary))
           fn
           (zip
             (iterate (+ 1) (setSize allSpilled) (length spilled))
             spilled)))
       (let liveness
         (assertNoFreeVariablesF fnName (computeLiveness instrs)))
       (allocateFunctionRegs
         (setUnion allSpilled (setFromList compareTemporary spilled))
         liveness fn*)))))

(public defn allocateProgramRegs
  (Func VProgram ProgLiveness (Stateful PProgram))
  ((Program main fns datums) liveness)
  (do State
    (let allocate
      (allocateFunctionRegs (setEmpty compareTemporary)))
    (with main*
      (allocate (snd (head liveness)) main))
    (with fns*
      (zipWithMState allocate (map snd (tail liveness)) fns))
    (returnState (Program main* fns* datums))))
